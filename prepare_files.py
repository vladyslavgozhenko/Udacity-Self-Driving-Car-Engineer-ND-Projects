#this python module generates additional data for deep neural network (data augmentation)
import csv
import cv2
import numpy as np
from scipy import ndimage
import os
import shutil
import scipy.misc
import sys


#reads lines from the driving_log.csv to array. Later the array will be used to extract pathes to images and appropriate steering angles
def read_csv():
	samples = []
	with open('driving_log.csv') as csvfile:
		reader = csv.reader(csvfile)
		for sample in reader:
			samples.append(sample)
	return samples


#to prepare folder for training set, we should be sure that, there is no old data in that folder. if folder exists, the function deletes folder and creates a new folder. if folder doesn't exist - new folder will created
def del_folder(dir_tmp):
	if not os.path.exists(dir_tmp):
		pass
		#os.makedirs(dir_tmp)
	else:
		try:
			shutil.rmtree(dir_tmp)
			print('existing folder deleted')
			#os.makedirs(dir_tmp)
		except Exception as err:
			print('Some of img files are still opened')
			raise


#"src" folder contain the data generated by training simulator, "dest" folder will have the images from "src" folder plus new augmentation data
def copy_dir(src, dest):
	try:
		shutil.copytree(src,dest)
		print('folder copied')
	#directories are the same error
	except shutil.Error as err:
		print("Directory not copied. Error %s" % err)
	#directory doesn't exist error
	except OSError as err:
		print('directory not copied. Error %s' % err)


#this function copies original "driving_log" with new name, later to the copied driving log will be added infos concerning augmentation data. new log file will have new structure: first columnd - path to images, seocnd column - appropriate steering angle. there is no correction for images from left and right cameras. correction will be applied during model training to the steering angle.
def copy_log(src, dest):
	samples = []
	with open(src) as csvfile:
		reader = csv.reader(csvfile)
		for sample in reader:
			samples.append(sample)
	with open(dest,'w') as csvfile:
		writer = csv.writer(csvfile, delimiter = ',')
		for sample in samples:
			angle = sample[3]
			for img in sample[0:3]:
				line = [img,angle]
				writer.writerow(line)


#this function generates augmentation data based on images in dir_tmp folder and information in the log file. original images will be flipped(always) and rotated (if rot-anlge!=0) and copied to dir_tmp. Simulteneously to file_log will be added pathes to the new images with steering angles.
def file_generator(samples, dir_tmp, file_log,  rot_angle = 0.0):
	file_log = open(file_log,'a')
	for sample in samples:
		angle = float(sample[3])
		filename_center = sample[0].split('\\')[-1]
		filename_left = sample[1].split('\\')[-1]
		filename_right = sample[2].split('\\')[-1]
		files = [filename_center,filename_left,filename_right]
		for file in files:
			line_flipped = []
			line_pos_rot = []
			line_neg_rot = []
			current_path = 'IMG/' + file
			image = cv2.imread(dir_tmp+'/'+file)
			image_edited = np.fliplr(image)
			path = dir_tmp +'\\' + file[:-4]+'_'+'flipped.jpg'
			line_flipped.append(path)
			scipy.misc.imsave(path.replace('\\','/'),image_edited)
			if rot_angle!=0.0:
				image_edited = ndimage.rotate(image, rot_angle, reshape=False)
				path = dir_tmp +'/' + file[:-4]+'_'+str(rot_angle) +'.jpg'
				scipy.misc.imsave(path,image_edited)
				line_pos_rot.append(path.replace('/','\\'))
				
				image_edited = ndimage.rotate(image, -1*rot_angle, reshape=False)
				path = dir_tmp +'/' + file[:-4]+'_'+str(-1*rot_angle) +'.jpg'
				scipy.misc.imsave(path,image_edited)
				line_neg_rot.append(path.replace('/','\\'))
			line_flipped.append(angle)
			writer = csv.writer(file_log)
			writer.writerow(line_flipped)
			if rot_angle!=0.0:
				line_pos_rot.append(angle)
				line_neg_rot.append(angle)
				writer.writerow(line_pos_rot)
				writer.writerow(line_neg_rot)
	file_log.close()
	print('angle %.1f' % rot_angle)


#preferred method to feed parameters to the functions is command line parameters, this way it will be easier later to create batch file and generate augmentation data with different angles simulteneously. since it is CPU heavy task, it won't slow down GPUs during model training.
def main(argv):
	rotation = 0.0
	dir_orig = 'IMG'
	file_log = 'driving_log.csv'
	samples = read_csv()
	if len(argv)==2:
		rotation=float(argv[1])
	dir_tmp = dir_orig +'_'+ str(rotation)
	file_log_full = 'driving_log_'+str(rotation)+'.csv'
	copy_log(file_log,file_log_full)
	del_folder(dir_tmp)
	copy_dir(dir_orig, dir_tmp)
	file_generator(samples, dir_tmp, file_log_full, rot_angle=rotation)


if __name__=='__main__':
	main(sys.argv)
